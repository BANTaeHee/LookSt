<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.lookst.admin.dao.AdminMapper">
        <!-- 메인 상품 리스트 -->
        <select id="newProductsInfo" resultType="IndexDto">
           select product.product_no, product_name, product_kind , product_price, product_info , prdt_img_name  
           from product product , prdt_img prdt_img 
           where product.product_no = prdt_img.product_no
           and product_type = 'Y'
           order by product_date desc
           LIMIT 4
        </select>
        <!-- 메인 스타일 리스트 -->
        <select id="stylePick" resultType="StylePickDto">
           select member.member_id, post.post_no,profile.profile_img ,member.member_nick, post_img.post_img_img
         from member member, profile profile, post_img post_img, post post
         where member.member_id = profile.member_id
         and member.member_id = post.member_id 
         and post.post_no = post_img.post_no 
         and post.post_type = 'Y'
         and post_img.post_img_seq = 1
         order by post.post_date desc
         limit 10;
        </select>

        <resultMap type="Post_imgDto" id="post_imgDto">
                <result column="post_img_img" property="post_img_img" />
        </resultMap>
        
        <resultMap type="NPostDto" id="nPostDto">
              <result column="post_no" property="post_no" />
              <result column="post_content" property="post_content" />
              <result column="post_reply" property="post_reply" />
        </resultMap>

        <resultMap type="NBoardDto" id="nBoardDto">
                <result column="board_no" property="board_no" />
                <result column="board_title" property="board_title" />
                <result column="board_kind" property="board_kind" />
                <result column="board_date" property="board_date" />
                <result column="board_type" property="board_type" />
        </resultMap>

        <resultMap type="NSellerDto" id="nSellerDto">
                <result column="seller_no" property="seller_no" />
                <result column="seller_name" property="seller_name" />
                <result column="seller_number" property="seller_number" />
        </resultMap>

        <resultMap type="MemMGMDto" id="MemMGMDto">
                <result column="member_id" property="member_id" />
                <result column="member_nick" property="member_nick" />
                <result column="member_name" property="member_name" />
                <result column="profile_img" property="profile_img" />
                <collection property="post_imgDto" resultMap="post_imgDto" />
                <collection property="nBoardDto" resultMap="nBoardDto" />
                <collection property="nSellerDto" resultMap="nSellerDto" />
                <collection property="nPostDto" resultMap="nPostDto" />
        </resultMap>
        
        
        <resultMap type="Prdt_Img" id="prdt_Img">
                <result column="prdt_img_no" property="prdt_img_no" />
                <result column="prdt_img_seq" property="prdt_img_seq" />
                <result column="prdt_img_name" property="prdt_img_name" />
        </resultMap>
        <resultMap type="Product" id="Product">
                <result column="product_no" property="product_no" />
                <result column="product_kind" property="product_kind" />
                <result column="product_price" property="product_price" />
                <result column="product_date" property="product_date" />
                <result column="product_name" property="product_name" />
                <result column="product_type" property="product_type" />
                <result column="product_info" property="product_info" />
                <collection property="prdt_Img" resultMap="prdt_Img" />
        </resultMap>

        <!-- 어드민 회원 리스트 sql -->
        <sql id="selectFromMemberManagement">
                SELECT profile.profile_img, member.member_id,
                member.member_name,
                member.member_since, member.member_updt,
                mem_auth.mem_auth_auth
                from member member, profile profile, mem_auth mem_auth
                where member.member_id = profile.member_id
                and member.member_id = mem_auth.member_id
        </sql>
        <!-- 어드민 회원 검색 리스트 sql -->
        <sql id="searchCondition">
                <choose>
                        <when test='option=="I"'>
                                AND member.member_id LIKE concat('%', #{keyword},'%')
                        </when>
                        <when test='option=="N"'>
                                AND member.member_name LIKE concat('%', #{keyword},'%')
                        </when>
                        <otherwise>
                                AND mem_auth.mem_auth_auth LIKE concat('%', #{keyword},'%')
                        </otherwise>
                </choose>
        </sql>
        <!-- 어드민 토탈 회원 출력 -->
        <select id="searchResultCnt" parameterType="SearchItem" resultType="int">
                select count(*)
                from member member, profile profile, mem_auth mem_auth
                where member.member_id = profile.member_id
                and member.member_id = mem_auth.member_id
                and true
                <include refid="searchCondition" />
        </select>
        <!-- 어드민 서치 회원 출력 -->
        <select id="searchSelectPage" parameterType="SearchItem"
                resultType="MemMGMDto">
                <include refid="selectFromMemberManagement" />
                and true
                <include refid="searchCondition" />
                order by member.member_since desc
                limit #{pageSize} offset #{offset}
        </select>
        <!-- 어드민 권한 변경 -->
        <update id="authModify" parameterType="map">
                UPDATE mem_auth
                SET mem_auth_auth = #{auth}
                WHERE member_id = #{member_id}
        </update>
        <!-- 어드민 회원 강퇴 -->
        <delete id="memberKickOut" parameterType="String">
                DELETE FROM member
                WHERE member_id= #{member_id}
        </delete>


        <!-- 어드민 SNS 리스트 sql -->
        <sql id="selectFromSNSManagement">
                select post.post_no, post_img.post_img_img,
                profile.profile_img,
                member.member_nick, member.member_id
                from member member, profile profile, post post, post_img post_img
                where member.member_id = profile.member_id
                and member.member_id = post.member_id
                and post.post_no = post_img.post_no
                and post.post_type = 'Y'
                and post_img.post_img_seq = 1
        </sql>
        <!-- 어드민 SNS 검색 리스트 sql -->
        <sql id="searchSNSCondition">
                <choose>
                        <when test='option=="I"'>
                                AND member.member_id LIKE concat('%', #{keyword},'%')
                        </when>
                        <when test='option=="N"'>
                                AND member.member_nick LIKE concat('%', #{keyword},'%')
                        </when>
                        <when test='option=="A"'>
                                AND post.post_no in(#{keyword}::integer)
                        </when>
                </choose>
        </sql>
        <!-- 어드민 토탈 SNS 출력 -->
        <select id="postSearchResultCnt" parameterType="SearchItem"
                resultType="int">
                select count(*)
                from member member, profile profile, post post,
                post_img post_img
                where member.member_id = profile.member_id
                and member.member_id = post.member_id
                and post.post_no = post_img.post_no
                and post.post_type = 'Y'
                and post_img.post_img_seq = 1
                and true
                <include refid="searchSNSCondition" />
        </select>
        <!-- 어드민 서치 SNS 출력 -->
        <select id="postSearchResultPage" parameterType="SearchItem" resultMap="MemMGMDto">
                <include refid="selectFromSNSManagement" />
                and true
                <include refid="searchSNSCondition" />
                order by post.post_date desc
                limit #{pageSize} offset #{offset}
        </select>
        <!-- SNS 강제 삭제 -->
        <delete id="postDelete" parameterType="int">
                DELETE FROM post
                WHERE post_no = #{post_no}
        </delete>

        <!-- 게시판 리스트 sql -->
        <sql id="selectFromBoardManagement">
                select board.board_no, board.board_title, member.member_name, board.board_kind, board.board_date, board.board_type
                from member member, board board
                where member.member_id = board.member_id
                and board.board_type in ('Y', 'N')
        </sql>
        <!-- 게시판 검색 리스트 sql -->
        <sql id="searchBoardCondition">
                <choose>
                        <when test='option=="N"'>
                                AND board.board_no in(#{keyword}::integer)
                        </when>
                        <when test='option=="T"'>
                                AND board.board_title LIKE concat('%', #{keyword},'%')
                        </when>
                        <when test='option=="W"'>
                                AND member.member_name LIKE concat('%', #{keyword},'%')
                        </when>
                </choose>
        </sql>
        <!-- 게시판 토탈 출력 -->
        <select id="boardSearchResultCnt" parameterType="SearchItem" resultType="int">
                select count(*)
                from member member, board board
                where member.member_id = board.member_id
                and board.board_type in ('Y', 'N')
                and true
                <include refid="searchBoardCondition" />
        </select>
        <!-- 게시판 서치 출력 -->
        <select id="boardSearchResultPage"
                parameterType="SearchItem" resultMap="MemMGMDto">
                <include refid="selectFromBoardManagement" />
                and true
                <include refid="searchBoardCondition" />
                order by board.board_date desc
                limit #{pageSize} offset #{offset}
        </select>
        <!-- 게시글 상태 변경 -->
        <update id="boardModify" parameterType="map">
                UPDATE board
                SET board_type = #{board_type}
                WHERE board_no = #{board_no}
        </update>
        <!-- 게시글 삭제 -->
        <delete id="boardDelete" parameterType="integer">
                DELETE FROM board
                WHERE board_no = #{board_no}
        </delete>

        <!-- magazin 신청 리스트 sql -->
        <sql id="selectFromMagazinManagement">
                select board.board_no , board.board_title,
                member.member_name,
                board.board_kind, board.board_date,board.board_type
                from member member, board board
                where member.member_id =
                board.member_id
                and board.board_type = 'A'
                and board.board_kind = 'M'
        </sql>
        <!-- magazin 신청 검색 리스트 sql -->
        <sql id="searchMagazinCondition">
                <choose>
                        <when test='option=="T"'>
                                AND board.board_title LIKE concat('%', #{keyword},'%')
                        </when>
                        <when test='option=="W"'>
                                AND member.member_name LIKE concat('%', #{keyword},'%')
                        </when>
                        <when test='option=="N"'>
                                AND board.board_no in(#{keyword}::integer)
                        </when>
                </choose>
        </sql>
        <!-- magazin 신청 토탈 출력 -->
        <select id="boardApplyingSearchResultCnt"
                parameterType="SearchItem" resultType="int">
                select count(*)
                from member member, board board
                where member.member_id = board.member_id
                and board.board_type = 'A'
                and board.board_kind = 'M'
                and true
                <include refid="searchMagazinCondition" />
        </select>
        <!-- magazin 신청 서치 출력 -->
        <select id="boardApplyingsearchResultPage"
                parameterType="SearchItem" resultMap="MemMGMDto">
                <include refid="selectFromMagazinManagement" />
                and true
                <include refid="searchMagazinCondition" />
                order by board.board_no desc
                limit #{pageSize} offset #{offset}
        </select>
        <!-- magazin 수락 -->
        <update id="magazinAgree" parameterType="integer">
                UPDATE board
                SET board_type = 'Y'
                WHERE board_no = #{board_no}
        </update>
        <!-- magazin 거부 -->
        <update id="magazinReject" parameterType="integer">
                UPDATE board
                SET board_type = 'N'
                WHERE board_no = #{board_no}
        </update>

        <!-- 판매자 신청 리스트 sql -->
        <sql id="selectFromSellerManagement">
                select seller_no,seller.seller_name,
                seller.seller_number,member.member_name
                from member member,seller seller
                where member.member_id = seller.member_id
                and seller.seller_type = 'A'
        </sql>
        <!-- 판매자 신청 검색 리스트 sql -->
        <sql id="searchSellerCondition">
                <choose>
                        <when test='option=="B"'>
                                AND seller.seller_no LIKE concat('%', #{keyword},'%')
                        </when>
                        <when test='option=="N"'>
                                AND seller.seller_name LIKE concat('%', #{keyword},'%')
                        </when>
                        <when test='option=="A"'>
                                AND member.member_name LIKE concat('%', #{keyword},'%')
                        </when>
                </choose>
        </sql>
        <!-- 판매자 신청 토탈 출력 -->
        <select id="sellerApplyingSearchResultCnt"
                parameterType="SearchItem" resultType="int">
                select count(*)
                from member member,seller seller
                where member.member_id = seller.member_id
                and seller.seller_type = 'A'
                and true
                <include refid="searchSellerCondition" />
        </select>
        <!-- 판매자 신청 서치 출력 -->
        <select id="sellerApplyingsearchResultPage" parameterType="SearchItem" resultMap="MemMGMDto">
                <include refid="selectFromSellerManagement" />
                and true
                <include refid="searchSellerCondition" />
                order by seller.member_id
                limit #{pageSize} offset #{offset}
        </select>
        <!-- 판매자 수락 -->
        <update id="sellerAgree" parameterType="String">
                UPDATE seller
                SET seller_type = 'Y'
                WHERE seller_no = #{seller_no}
        </update>
        <!-- 판매자 거부 -->
        <update id="sellerReject" parameterType="String">
                UPDATE seller
                SET seller_type = 'N'
                WHERE seller_no = #{seller_no}
        </update>
      
      <!-- 상품 리스트 sql -->
      <sql id="selectFromShopList">
	      select product.product_no, product.product_kind, product.product_price, product.product_name, product.product_info, prdt_img.prdt_img_name
	      from product product, prdt_img prdt_img
	      where product.product_no = prdt_img.product_no
	      and product.product_type = 'Y'
	      and prdt_img.prdt_img_seq = 1
      </sql>
      <!-- 상품 리스트 검색 리스트 sql -->
      <sql id="searchShopCondition">
           <choose>
                   <when test='option=="N"'>
                           AND product.product_name LIKE concat('%', #{keyword},'%')
                   </when>
                   <when test='option=="S"'>
                           AND product.product_kind LIKE concat('%', #{keyword},'%')
                   </when>
                   <when test='option=="T"'>
                           AND product.product_kind LIKE concat('%', #{keyword},'%')
                   </when>
           </choose>
      </sql>
      <!-- 상품 리스트 토탈 출력 -->
      <select id="shopListSearchResultCnt" parameterType="SearchItem" resultType="int">
	      select count(*)
	      from product product, prdt_img prdt_img
	      where product.product_no = prdt_img.product_no
	      and product.product_type = 'Y'
	      and prdt_img.prdt_img_seq = 1
	      and true
	      <include refid="searchShopCondition" />
      </select>
      <!-- 상품 리스트 서치 출력 -->
      <select id="shopListSearchResultPage" parameterType="SearchItem" resultMap="Product">
              <include refid="selectFromShopList" />
              and true
              <include refid="searchShopCondition" />
              order by product.product_date desc
              limit #{pageSize} offset #{offset}
      </select>
      <!-- 상품 정보 -->
      <select id="getproductInfo" parameterType="integer" resultType="product">
         select * from product
         where product_no = #{product_no}
      </select>
      <!-- 현재 상품 재고 사이즈 출력 -->
      <select id="getproductSize" parameterType="integer" resultType="Prdt_Option">
         select distinct prdt_option_size from prdt_option
         where product_no = #{product_no}
         order by prdt_option_size DESC
      </select>
      <!-- 상품 이미지 출력 -->
      <select id="getproductImg" parameterType="integer" resultType="Prdt_Img">
         select * from prdt_img
         where product_no = #{product_no}
         order by prdt_img_seq asc
      </select>
      <!-- 상품 재고 색상 출력 -->
      <select id="productColor" parameterType="map" resultType="Prdt_Option">
         select prdt_option_color, prdt_option_stock  from prdt_option
                 where product_no = #{product_no}
                 and prdt_option_size = #{prdt_option_size}
                 and prdt_option_stock > 0
     </select>
     <!-- 오더 페이지 이동 -->
     <select id="orderInfo" parameterType="Integer" resultType="OrderInfoDto">
        select *
         from product product, prdt_img prdt_img 
         where product.product_no = prdt_img.product_no
         and product.product_no = #{product_no}
         and prdt_img.prdt_img_seq = 1;
   </select>
   <!-- 주문 내용 삽입 -->
   <insert id="orderInsert" parameterType="PrdtOrderDto">
        INSERT INTO prdt_order(prdt_order_no,product_no, member_id, prdt_order_quan, prdt_order_date, prdt_order_way, prdt_order_phone, prdt_order_addr, prdt_order_addr2, prdt_order_person, prdt_order_type, prdt_order_cancel, prdt_order_size, prdt_order_color, prdt_order_price)
        VALUES(#{prdt_order_no}, #{product_no}, #{member_id}, #{prdt_order_quan}, 'now()', #{prdt_order_way}, #{prdt_order_phone}, #{prdt_order_addr}, #{prdt_order_addr2}, #{prdt_order_person}, 'P', 'N', #{prdt_order_size}, #{prdt_order_color}, #{prdt_order_price})
   </insert>
     
     <!-- sns total 리스트 출력 -->
     <select id="snsTotalList" resultType="integer">
             select post.post_no  from post post 
             where post.post_type = 'Y'
             order by post.post_date desc
     </select>
     <!-- sns 이미지 및 정보 출력 -->
     <select id="snsTotalListCarousel" parameterType="Integer" resultMap="MemMGMDto">
         select member.member_id, post.post_no, post.post_content, post_img.post_img_img, profile.profile_img, member.member_nick  from post post,post_img post_img,member member, profile profile
       where post.member_id = member.member_id
       and member.member_id = profile.member_id 
       and post.post_no = post_img.post_no
       and post.post_type = 'Y'
       and post_img.post_img_seq = 1
       and post.post_no = #{post_no}
       order by post.post_date desc
     </select>
     <!-- sns sns 상단 정보 출력 -->
     <select id="snsTopList" resultMap="MemMGMDto">
       select member.member_id, post.post_no, post.post_content, post_img.post_img_img, post.post_reply, profile.profile_img, member.member_nick  from post post,post_img post_img,member member, profile profile
       where post.member_id = member.member_id
       and member.member_id = profile.member_id 
       and post.post_no = post_img.post_no
       and post.post_type = 'Y'
       and post_img.post_img_seq = 1
       order by post.post_date desc
     </select>
     <!-- 포스트 태그 정보 -->
     <select id="postTagInfo" parameterType="Integer" resultType="Post_TagDto">
      select * from post_tag
      where post_no = #{post_no}
      order by post_tag_no
     </select>
     <!-- sns 태그정보 출력 -->
     <select id="tagInfoList" parameterType="Integer" resultType="String">
     	select tag_content from tag
		where post_no = #{post_no}
		order by tag_no
     </select>
     <!-- 좋아요 체크 -->
     <insert id="postLikeInsert" parameterType="snsHeartDto">
     	INSERT INTO public.sns_heart
		(member_id, post_no, sns_heart_bool)
		VALUES(#{member_id}, #{post_no}, True)
     </insert>
     <!-- 좋아요 취소 -->
     <delete id="postLikeDelete" parameterType="snsHeartDto">
     	DELETE FROM sns_heart
		WHERE member_id = #{member_id}
		and post_no = #{post_no}
     </delete>
     <!-- 좋아요 출력 -->
     <select id="postLikeCheck" parameterType="String" resultType="Integer">
     	select post_no from sns_heart
     	where member_id = #{member_id}
		order by post_no desc
     </select>
     <!-- sns 클릭 한 상세 포스트 -->
     <select id="snsDetailClick" parameterType="Integer" resultMap="MemMGMDto">
     	select member.member_id, post.post_no, post.post_content, post.post_reply, post.post_date, member.member_nick, profile.profile_img from post post, member member, profile profile
		where member.member_id = post.member_id
		and member.member_id = profile.member_id
		and post.post_type = 'Y'
		and post.post_no = #{post_no}
     </select>
     <!-- sns 클릭 한 이미지 -->
     <select id="snsDetailClickImg" parameterType="Integer" resultType="Post_imgDto">
     	select post_img.post_img_img from post post, post_img post_img
		where post.post_no = post_img.post_no 
		and post.post_type = 'Y'
		and post.post_no = #{post_no}
		order by post_img.post_img_seq
     </select>
     <!-- sns 디테일 페이지 상품 태그 갯수 -->
     <select id="postTagInfoCnt" parameterType="Integer" resultType="Integer">
     	select count(*) from post_tag
		where post_no = #{post_no}
     </select>
     <!-- sns 디테일 페이지 좋아요 갯수 -->
     <select id="postLikedCnt" parameterType="Integer" resultType="Integer">
     	select count(*)  from sns_heart
		where post_no = #{post_no}
     </select>
     <!-- sns 디테일 페이지 좋아요 체크 -->
     <select id="postLikedCheck" parameterType="SnsHeartDto" resultType="Integer">
     	select post_no from sns_heart
		where member_id = #{member_id}
		and post_no = #{post_no}
		and sns_heart_bool = True
     </select>
     <!-- sns 댓글 리스트 -->
     <select id="snsReplyList" parameterType="Integer" resultType="SnsCommentDto">
     	select * from sns_comment sc
		where post_no = #{post_no}
		order by sns_comment_group desc, sns_comment_seq asc
     </select>
     <!-- 개인 프로필, 닉네임 호출 -->
     <select id="myNickProfile" parameterType="String" resultMap="MemMGMDto">
     	select member.member_nick, profile.profile_img  from member member, profile profile
		where member.member_id = profile.member_id
		and member.member_id = #{member_id}
     </select>
     <!-- post에 댓글수 증가 -->
	<update id="postReplyUp" parameterType="NPostDto">
	    update post set post_reply = post_reply + 1 
	    where post_no = #{post_no}
	</update>
	<!-- sns_comment 가장 큰 댓글 값 가져오기 -->
	<select id="postReplyMaxNo" parameterType="NPostDto" resultType="int">
	    select max("sns_comment_group") from sns_comment
	    where post_no = #{post_no}
	</select>
	<!-- 모댓글 쓰기 -->
	<insert id="postReplyWrite" parameterType="SnsCommentDto">
	    insert into sns_comment
	    (member_id, post_no, sns_comment_con, sns_comment_date, sns_comment_seq, sns_comment_class, sns_comment_group, sns_comment_nick, sns_comment_profile)
		VALUES(#{member_id}, #{post_no}, #{sns_comment_con}, now(), 0, 0, #{sns_comment_group}, #{sns_comment_nick}, #{sns_comment_profile});
	</insert>
	<!-- 모댓글일경우 no, grp 일치하게 함 -->
	<update id="postReplyCheck" parameterType="SnsCommentDto">
	    update sns_comment set sns_comment_group = #{sns_comment_group}
	    where sns_comment_no != sns_comment_group
	</update>
	<!-- 답글 쓰기 -->
	<insert id="postRereplyWrite" parameterType="SnsCommentDto">
	    insert into sns_comment
	    (member_id, post_no, sns_comment_con, sns_comment_date, sns_comment_seq, sns_comment_class, sns_comment_group, sns_comment_nick, sns_comment_profile)
		VALUES(#{member_id}, #{post_no}, #{sns_comment_con}, now(), #{sns_comment_seq}, #{sns_comment_class}, #{sns_comment_group}, #{sns_comment_nick}, #{sns_comment_profile});
	</insert>
	<!-- sns_comment 순서 가장 큰 댓글 값 가져오기 -->
	<select id="replySeqMaxNo" parameterType="SnsCommentDto" resultType="int">
	    select max("sns_comment_seq") from sns_comment
	    where post_no = #{post_no}
	    and sns_comment_group = #{sns_comment_group}
	</select>
	<!-- 댓글 추가/삭제시 댓글 갯수 가져오기 -->
	<select id="postReplyCount" parameterType="NPostDto" resultType="NPostDto">
	    select post_reply 
	    from post
	    where post_no = #{post_no}
	</select>
	<!-- 모댓글의 답글수를 카운트 -->
	<select id="postCountRereply" parameterType="SnsCommentDto" resultType="int">
	    select count(sns_comment_no)
	    from sns_comment
	    where sns_comment_no != #{sns_comment_no} and sns_comment_group = #{sns_comment_group}
	</select>
	<!-- post에 댓글수 감소 -->
	<update id="postReplyDown" parameterType="NPostDto">
	    update post set post_reply = post_reply - 1
	    where post_no = #{post_no}
	</update>
	<!-- 모댓글 삭제 - 답글 없음 -->
	<delete id="postReplyDelete" parameterType="SnsCommentDto">
	    delete from sns_comment
	    where sns_comment_no = #{sns_comment_no}
	</delete>
	<!-- 모댓글 삭제 - 답글 있음 -->
	<update id="postReplyNotDelete" parameterType="SnsCommentDto">
	    update sns_comment set sns_comment_con=''
	    where sns_comment_no = #{sns_comment_no}
	</update>
	<!-- 답글수를 카운트 -->
	<select id="postCountRereplyFromrereply" parameterType="SnsCommentDto" resultType="int">
	    select count(sns_comment_no)
	    from sns_comment
	    where sns_comment_no != #{sns_comment_no} and sns_comment_group = #{sns_comment_group}
	</select>
	<!-- 모댓글이 삭제된 댓글일때 그에 딸린 답글들이 모두삭제되면 테이블에서 완전히 삭제한다 -->
	<delete id="postReplyDeleteAfterRereplyDelete" parameterType="SnsCommentDto">
	    delete from sns_comment
	    where sns_comment_con='' and sns_comment_group = #{sns_comment_group}
	</delete>
</mapper>