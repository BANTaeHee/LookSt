<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.lookst.board.dao.BoardMapper">
	<sql id="selectFromBoard">
		SELECT board_no, board_title, board_con, member_id,
		board_views, board_date, board_type, board_kind
		FROM board
	</sql>

	<select id="select" parameterType="int" resultType="BoardDto">
		<include refid="selectFromBoard" />
		where board_no = #{board_no}
		order by board_no desc
	</select>

	<select id="selectR" parameterType="int" resultType="BoardDto">
		<include refid="selectFromBoard" />
		where board_no = #{board_no}
		and board_type = #{board_type}
		and
		board_kind = #{board_kind}
		order by board_no desc
	</select>


	<delete id="deleteAll">
		delete from BOARD
	</delete>

	<delete id="delete" parameterType="map">
		delete from BOARD
		where
		board_no = #{board_no}
		and member_id = #{member_id}
	</delete>


	<delete id="deleteR" parameterType="map">
		delete from BOARD
		where
		board_no = #{board_no}
		and member_id = #{member_id}
	</delete>

	<delete id="deleteM" parameterType="map">
		delete from BOARD
		where
		board_no = #{board_no}
		and member_id = #{member_id}
	</delete>

	<delete id="deleteForAdmin">
		delete from BOARD where board_no = #{board_no}
	</delete>

	<delete id="deleteImage" parameterType="int">
		delete from board_img
		where board_no = #{board_no}
	</delete>

	<insert id="insert" parameterType="BoardDto">
		INSERT INTO board
		(member_id, board_title, board_con, board_type,
		board_kind)
		VALUES
		(#{member_id}, #{board_title}, #{board_con},'Y', 'Q')
		<!--이부분 따로 kind랑 type을 어떻게 넣을건지 정해서 구현하면 됨 -->
	</insert>

	<insert id="insertM" parameterType="BoardDto"
		useGeneratedKeys="true" keyProperty="board_no">
		<!-- useGeneratedKeys : (insert, update에만 적용) 자동생성 키를 받을 때 true로 설정한다. (default: 
			false) -->
		<!-- keyProperty : 리턴 될 key property 설정. 여러개를 사용한다면 ,(콤마)를 구분자로 나열한다.
						    keyProperty는 리턴이 된 키 값들을 어느 필드에 set 할 건지를 나타냄. -->
						    <!--  board_no 시퀀스를 사용하면 그 값울 dto에 매핑해주는 것 -->
		INSERT INTO board
		(member_id, board_title, board_con, board_type,
		board_kind)
		VALUES
		(#{member_id}, #{board_title}, #{board_con},'Y', 'M')
		<!--이부분 따로 kind랑 type을 어떻게 넣을건지 정해서 구현하면 됨 -->
	</insert>

	<insert id="insertBoardImages" parameterType="Board_imgDto">
		INSERT INTO board_img
		(board_no, board_img_seq, board_img_img)
		VALUES
		<foreach collection="list" item="item" separator=" , ">
			(#{item.board_no}, #{item.board_img_seq}, #{item.board_img_img})
		</foreach>
		<!-- Mybatis 부분에서 foreach 문을 사용하는 이유는 동일한 구문으로 이루어진 다수의 쿼리문을 보다 빠르게 쿼리문을 진행할 수 있기 때문에 -->
		<!-- collection : 전달 받는 list를 속성 값으로 삽입. 반드시 Array 또는 List 값이여야 함. -->
		<!-- item : collection 속성에서 전달 받은 list 값을 대체할 이름(item)을 속성 값으로 삽입. -->
	</insert>


	<insert id="insertR" parameterType="BoardDto">
		INSERT INTO board
		(member_id, board_title, board_con, board_type,
		board_kind)
		VALUES
		(#{member_id}, #{board_title}, #{board_con},'Y', 'R')
		<!--이부분 따로 kind랑 type을 어떻게 넣을건지 정해서 구현하면 됨 -->
	</insert>


	<select id="count" resultType="int">
		select count(*)
		from BOARD
	</select>

	<select id="searchResultCntQ" parameterType="SearchItem"
		resultType="int">
		select count(*)
		from BOARD
		where true
		and board_kind = 'Q'
		<include refid="searchCondition" />
	</select>

	<select id="searchResultCntN" parameterType="SearchItem"
		resultType="int">
		select count(*)
		from BOARD
		where true
		and board_kind = 'N'
		<include refid="searchCondition" />
	</select>

	<select id="searchResultCntM" parameterType="SearchItem"
		resultType="int">
		select count(*)
		from BOARD
		where true
		and board_kind = 'M'
		<include refid="searchCondition" />
	</select>

	<select id="searchResultCntR" parameterType="SearchItem"
		resultType="int">
		select count(*)
		from BOARD
		where true
		and board_kind = 'R'
		<include refid="searchCondition" />
	</select>


	<sql id="searchCondition">
		<choose>
			<when test='option=="T"'>
				AND board_title LIKE concat('%', #{keyword}, '%')
			</when>
			<when test='option=="W"'>
				AND member_id LIKE concat('%', #{keyword}, '%')
			</when>
			<otherwise>
				AND (board_title LIKE concat('%', #{keyword}, '%')
				OR
				board_con
				LIKE concat('%', #{keyword}, '%'))
			</otherwise>
		</choose>
	</sql>

	<select id="selectPage" parameterType="map"
		resultType="BoardDto">
		<include refid="selectFromBoard" />
		order by board_date desc, board_no desc
		limit #{pageSize} offset
		#{offset}
	</select>

	<select id="searchSelectPageN" parameterType="SearchItem"
		resultType="BoardDto">
		select
		board_no, board_title, board_con, member_id, board_type,
		board_date, board_kind
		FROM board
		where true
		and board_type ='Y'
		and
		board_kind ='N'
		<include refid="searchCondition" />
		order by board_no desc, board_date desc
		limit #{pageSize} offset
		#{offset}
	</select>


	<select id="searchSelectPageM" parameterType="SearchItem"
		resultType="BoardDto">
		select board_no , board_title, board_con , member_id , board_views ,
		board_date
		from BOARD
		where true
		and board_type ='Y'
		and board_kind ='M'
		<include refid="searchCondition" />
		order by board_no desc, board_date desc
		limit #{pageSize} offset
		#{offset}
	</select>


	<select id="searchSelectPageQ" parameterType="SearchItem"
		resultType="BoardDto">
		select board_no , board_title, board_con , member_id , board_views ,
		board_date, board_type, board_kind
		from BOARD
		where true
		and board_type
		='Y'
		and board_kind ='Q'
		<include refid="searchCondition" />
		order by board_no desc, board_date desc
		limit #{pageSize} offset
		#{offset}
	</select>

	<select id="searchSelectPageR" parameterType="SearchItem"
		resultType="BoardDto">
		select board_no , board_title, board_con , member_id , board_views ,
		board_date, board_type, board_kind
		from BOARD
		where true
		and board_type
		='Y'
		and board_kind ='R'
		<include refid="searchCondition" />
		order by board_no desc, board_date desc
		limit #{pageSize} offset
		#{offset}
	</select>


	<update id="increaseViewCnt" parameterType="int">
		update BOARD
		set
		board_views = board_views + 1
		where board_no = #{board_no}
	</update>

	<update id="update" parameterType="BoardDto">
		update BOARD
		SET
		board_title=#{board_title}, board_con= #{board_con}
		WHERE
		board_no=#{board_no}
		and board_type ='Y'
		and board_kind ='Q'
		and
		member_id=#{member_id}
	</update>

	<update id="updateR" parameterType="BoardDto">
		update BOARD
		SET
		board_title=#{board_title}, board_con= #{board_con}
		WHERE
		board_no=#{board_no}
		and board_type ='Y'
		and board_kind ='R'
		and
		member_id=#{member_id}
	</update>

	<update id="updateM" parameterType="BoardDto">
		update BOARD
		SET
		board_title=#{board_title}, board_con= #{board_con}
		WHERE
		board_no=#{board_no}
		and board_type ='Y'
		and board_kind ='M'
		and
		member_id=#{member_id}
	</update>

	<select id="boardList" parameterType="Integer"
		resultType="MagazineSimpleDto">
		SELECT b.board_no, b.member_id, b.board_date, b.board_title,
		bi.board_img_img
		FROM board b left join
		(SELECT distinct on (board_no) *
		FROM board_img ) bi
		<!-- 썸네일에서 출력되는 이미지 값들의 중복 방지를 위해서 DISTINCT를 사용하면 쿼리문을 분석할 때 중복을 제거한 결과가 
			반환된다는 것을 직관적으로 파악이 가능하다. -->
		on b.board_no = bi.board_no
		<!-- boadr_img 에서 board_no 를 기준으로 가장 작은 값들 select 후 board 테이블과 join -->
		where b.board_no > #{lastIndex}
		<!-- 이전데이터의 마지막인덱스 보다 큰값을 가져옴 -->
		and b.board_type = 'Y' and b.board_kind = 'M'
		order by b.board_no asc limit 4
		<!-- join한 테이블에서 마지막 인덱스를 기준으로 4개가져옴 -->
	</select>

	<select id="boardImgList" parameterType="Integer"
		resultType="String">
		SELECT board_img_img FROM board_img where board_no =#{board_no};
		<!--board_no 를 기준으로 image 경로 select -->
	</select>


	<!-- <insert id="insertComment" parameterType="CommentDto"> </insert> -->


	<select id="movePage" resultType="BoardDto" parameterType="int">
		<!--다음 글의 번호제목 이전글의 번호 제목을 select 로 각각 쿼리하는 방식으로 함. -->
		<!-- Mybatis 사용시 쿼리문에 문자열 비교연산자나 부등호를 처리할 때가 있다. 그러면 < 와 같은 기호를 괄호인지 아니면 
			비교연산자 인지 확인이 되지않고, 이외에도 특수문자 사용하는데 제한이 있다. 이럴 때 사용하는 것이 이럴때 사용한것이 <![CDATA[ 
			임. 그래서 CDATA 안에 들어가는 문장을 문자열로 인식하게 하게 되고, SQL안에 특수문자가 들어가도 문자열로 인식하기때문에 문제를 
			해결할 수 있다. -->
<![CDATA[
        /*현재 board_no 보다 이전값 중에 가장 큰값 내림차순 1개*/
        SELECT (SELECT board_no as last
                FROM board
                where board_no < #{board_no}
                  and board_kind = 'N'
                  and board_type = 'Y'
                ORDER BY board_no DESC
                LIMIT 1),
               (SELECT board_title as lastTitle
                FROM board
                where board_no < #{board_no}
                  and board_kind = 'N'
                  and board_type = 'Y'
                ORDER BY board_no DESC
                LIMIT 1),
               (SELECT board_no as next
                FROM board
                WHERE board_no > #{board_no}
                  and board_kind = 'N'
                  and board_type = 'Y'
                ORDER BY board_no
                LIMIT 1),
               (SELECT board_title
                FROM board
                where board_no > #{board_no}
                  and board_kind = 'N'
                  and board_type = 'Y'
				ORDER BY board_no
				LIMIT 1)
				   as nextTitle;
        ]]>
	</select>


	<select id="movePageM" resultType="BoardDto" parameterType="int">
		<!--다음 글의 번호제목 이전글의 번호 제목을 select 로 각각 쿼리하는 방식으로 함. -->
		<!-- Mybatis 사용시 쿼리문에 문자열 비교연산자나 부등호를 처리할 때가 있다. 그러면 < 와 같은 기호를 괄호인지 아니면 
			비교연산자 인지 확인이 되지않고, 이외에도 특수문자 사용하는데 제한이 있다. 이럴 때 사용하는 것이 이럴때 사용한것이 <![CDATA[ 
			임. 그래서 CDATA 안에 들어가는 문장을 문자열로 인식하게 하게 되고, SQL안에 특수문자가 들어가도 문자열로 인식하기때문에 문제를 
			해결할 수 있다. -->
<![CDATA[
        /*현재 board_no 보다 이전값 중에 가장 큰값 내림차순 1개*/
        SELECT (SELECT board_no as last
                FROM board
                where board_no < #{board_no}
                  and board_kind = 'M'
                  and board_type = 'Y'
                ORDER BY board_no DESC
                LIMIT 1),
               (SELECT board_title as lastTitle
                FROM board
                where board_no < #{board_no}
                  and board_kind = 'M'
                  and board_type = 'Y'
                ORDER BY board_no DESC
                LIMIT 1),
               (SELECT board_no as next
                FROM board
                WHERE board_no > #{board_no}
                  and board_kind = 'M'
                  and board_type = 'Y'
                ORDER BY board_no
                LIMIT 1),
               (SELECT board_title
                FROM board
                where board_no > #{board_no}
                  and board_kind = 'M'
                  and board_type = 'Y'
				ORDER BY board_no
				LIMIT 1)
				   as nextTitle;
        ]]>
	</select>



	<!-- 댓글 매퍼 -->

	<update id="updateCommentCnt" parameterType="map">
		update board
		set comment_cnt = comment_cnt + #{cnt}
		where board_no = #{board_no}
	</update>

</mapper>