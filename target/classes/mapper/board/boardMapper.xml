<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.lookst.board.dao.BoardMapper">
    <sql id="selectFromBoard">
        SELECT board_no, board_title, board_con, member_id,
        board_views, board_date, board_type, board_kind
        FROM board
    </sql>

    <select id="select" parameterType="int" resultType="BoardDto">
        <include refid="selectFromBoard"/>
        where board_no = #{board_no}
        order by board_no desc
    </select>

    <select id="selectR" parameterType="int" resultType="BoardDto">
        <include refid="selectFromBoard"/>
        where board_no = #{board_no}
        and board_type = #{board_type}
        and board_kind = #{board_kind}
        order by board_no desc
    </select>


    <delete id="deleteAll">
        delete from BOARD
    </delete>

    <delete id="delete" parameterType="map">
        delete from BOARD where
        board_no
        = #{board_no} and member_id = #{member_id}
    </delete>


    <delete id="deleteR" parameterType="map">
        delete from BOARD
        where board_no = #{board_no}
        and member_id = #{member_id}
    </delete>

    <delete id="deleteForAdmin">
        delete from BOARD where board_no = #{board_no}
    </delete>

    <insert id="insert" parameterType="BoardDto">
        INSERT INTO board
        (member_id, board_title, board_con, board_type, board_kind)
        VALUES
        (#{member_id}, #{board_title}, #{board_con},'Y', 'Q')
        <!--이부분 따로  kind랑 type을 어떻게 넣을건지 정해서 구현하면 됨-->
    </insert>

    <insert id="insertM" parameterType="BoardDto">
        INSERT INTO board
        (member_id, board_title, board_con, board_type, board_kind)
        VALUES
        (#{member_id}, #{board_title}, #{board_con},'Y', 'M')
        <!--이부분 따로  kind랑 type을 어떻게 넣을건지 정해서 구현하면 됨-->
    </insert>


    <insert id="insertR" parameterType="BoardDto">
        INSERT INTO board
        (member_id, board_title, board_con, board_type, board_kind)
        VALUES
        (#{member_id}, #{board_title}, #{board_con},'Y', 'R')
        <!--이부분 따로  kind랑 type을 어떻게 넣을건지 정해서 구현하면 됨-->
    </insert>


    <select id="count" resultType="int">
        select count(*) from BOARD
    </select>

    <select id="searchResultCntQ" parameterType="SearchItem"
            resultType="int">
        select count(*)
        from BOARD
        where true
        and board_kind = 'Q'
        <include refid="searchCondition"/>
    </select>

    <select id="searchResultCntN" parameterType="SearchItem"
            resultType="int">
        select count(*)
        from BOARD
        where true
        and board_kind = 'N'
        <include refid="searchCondition"/>
    </select>

    <select id="searchResultCntM" parameterType="SearchItem"
            resultType="int">
        select count(*)
        from BOARD
        where true
        and board_kind = 'M'
        <include refid="searchCondition"/>
    </select>

    <select id="searchResultCntR" parameterType="SearchItem"
            resultType="int">
        select count(*)
        from BOARD
        where true
        and board_kind = 'R'
        <include refid="searchCondition"/>
    </select>


    <sql id="searchCondition">
        <choose>
            <when test='option=="T"'>
                AND board_title LIKE concat('%', #{keyword}, '%')
            </when>
            <when test='option=="W"'>
                AND member_id LIKE concat('%', #{keyword}, '%')
            </when>
            <otherwise>
                AND (board_title LIKE concat('%', #{keyword}, '%')
                OR
                board_con
                LIKE concat('%', #{keyword}, '%'))
            </otherwise>
        </choose>
    </sql>

    <select id="selectPage" parameterType="map"
            resultType="BoardDto">
        <include refid="selectFromBoard"/>
        order by board_date desc, board_no desc
        limit #{pageSize} offset
        #{offset}
    </select>

    <select id="searchSelectPageN" parameterType="SearchItem" resultType="BoardDto">
        select
        board_no, board_title, board_con, member_id, board_type, board_date, board_kind
        FROM board
        where true
        and board_type ='Y'
        and board_kind ='N'
        <include refid="searchCondition"/>
        order by  board_no desc, board_date desc
        limit #{pageSize} offset #{offset}
    </select>


    <select id="searchSelectPageM" parameterType="SearchItem"
            resultType="BoardDto">
        select board_no , board_title, board_con , member_id , board_views ,
        board_date
        from BOARD
        where true
        and board_type ='Y'
        and board_kind ='M'
        <include refid="searchCondition"/>
        order by board_no desc, board_date desc
        limit #{pageSize} offset
        #{offset}
    </select>


    <select id="searchSelectPageQ" parameterType="SearchItem"
            resultType="BoardDto">
        select board_no , board_title, board_con , member_id , board_views ,
        board_date, board_type, board_kind
        from BOARD
        where true
        and board_type ='Y'
        and board_kind ='Q'
        <include refid="searchCondition"/>
        order by board_no desc, board_date desc
        limit #{pageSize} offset
        #{offset}
    </select>

    <select id="searchSelectPageR" parameterType="SearchItem"
            resultType="BoardDto">
        select board_no , board_title, board_con , member_id , board_views ,
        board_date, board_type, board_kind
        from BOARD
        where true
        and board_type ='Y'
        and board_kind ='R'
        <include refid="searchCondition"/>
        order by board_no desc, board_date desc
        limit #{pageSize} offset
        #{offset}
    </select>


    <update id="increaseViewCnt" parameterType="int">
        update BOARD
        set
        board_views = board_views + 1
        where board_no = #{board_no}
    </update>

    <update id="update" parameterType="BoardDto">
        update BOARD
        SET
        board_title=#{board_title}, board_con= #{board_con}
        WHERE board_no=#{board_no}
        and board_type ='Y'
        and board_kind ='Q'
        and member_id=#{member_id}
    </update>

    <update id="updateR" parameterType="BoardDto">
        update BOARD
        SET
        board_title=#{board_title}, board_con= #{board_con}
        WHERE board_no=#{board_no}
        and board_type ='Y'
        and board_kind ='R'
        and member_id=#{member_id}
    </update>



    <select id="boardList" parameterType="Integer" resultType="MagazineSimpleDto">
      <!--   SELECT b.board_no,b.member_id,b.board_date,b.board_title,bi.board_img_img
      FROM board b left join (SELECT * FROM board_img GROUP BY board_no HAVING MIN(board_no)) bi 
      on b.board_no = bi.board_no where b.board_no > #{lastIndex} and    
        b.board_type = 'Y' and b.board_kind = 'M' limit 5; -->
        
        SELECT b.board_no, b.member_id, b.board_date, b.board_title, bi.board_img_img
      FROM board b left join                                              
      (SELECT distinct on (board_no) * FROM board_img ) bi                     <!-- 썸네일에서 출력되는 이미지 값들의 중복 방지를 위해서 DISTINCT를 사용하면 쿼리문을 분석할 때 중복을 제거한 결과가 반환된다는 것을 직관적으로 파악이 가능하다. -->
      on b.board_no = bi.board_no                                        <!-- boadr_img 에서 board_no 를 기준으로 가장 작은 값들 select 후 board 테이블과 join-->
      where b.board_no > #{lastIndex}                                        <!-- 이전데이터의 마지막인덱스 보다 큰값을 가져옴 -->                   
      and b.board_type = 'Y' and b.board_kind = 'M'                            <!-- join한 테이블에서 마지막 인덱스를 기준으로 5개가져옴--> 
      order by b.board_no asc limit 5
<!--       order by b.board_no  bi.board_img_no desc limit 5; -->
    </select>
    
    <select id="boardImgList" parameterType="Integer" resultType="String">
        SELECT board_img_img FROM board_img where board_no =#{board_no};                <!--board_no 를 기준으로 image 경로 select-->
    </select>   


    <!--    <insert id="insertComment" parameterType="CommentDto">

        </insert> -->


   <!-- 이전글 다음글 매퍼  -->
   <select id="movePage" parameterType="int" resultType="BoardDto">
      select * from ( 
            select board_no, board_title, board_type, board_kind,
            lead(board_no, 1, 9999) over(order by board_no) as next,
            lead(board_title, 1, '다음글') over(order by board_no) as nextTitle,
            lag(board_no, 1, 9999) over(order by board_no) as last,
            lag(board_title, 1, '이전글') over(order by board_no) as lastTitle
            from board
            ) as f
            where board_no = #{board_no}
            and f.board_type = 'Y'
            and f.board_kind = 'N'
            order by board_no desc;
   </select>




    <!-- 댓글 매퍼 -->

    <update id="updateCommentCnt" parameterType="map">
        update board
        set comment_cnt = comment_cnt + #{cnt}
        where board_no = #{board_no}
    </update>


</mapper>